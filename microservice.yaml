apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-auth
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth-mysql
  template:
    metadata:
      labels:
        app: auth-mysql 
    spec:
      containers:
      - name: mysql
        image: mysql:8.0
        ports:
        - containerPort: 3306
          name: mysql
        envFrom:
        - secretRef:
            name: mysql-auth-secret
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim-auth
---
apiVersion: v1
kind: Service
metadata:
  name: auth-mysql-service
spec:
  selector:
    app: auth-mysql
  ports:
  - protocol: TCP
    port: 3306
    targetPort: 3306
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim-auth
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-invoice
spec:
  replicas: 1
  selector:
    matchLabels:
      app: invoice-mysql
  template:
    metadata:
      labels:
        app: invoice-mysql 
    spec:
      containers:
      - name: mysql
        image: mysql:8.0
        ports:
        - containerPort: 3306
          name: mysql
        envFrom:
        - secretRef:
            name: mysql-invoice-secret
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim-invoice
---
apiVersion: v1
kind: Service
metadata:
  name: invoice-mysql-service
spec:
  selector:
    app: invoice-mysql
  ports:
  - protocol: TCP
    port: 3307
    targetPort: 3306
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim-invoice
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-order-picking
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order-picking-mysql
  template:
    metadata:
      labels:
        app: order-picking-mysql 
    spec:
      containers:
      - name: mysql
        image: mysql:8.0
        ports:
        - containerPort: 3306
          name: mysql
        envFrom:
        - secretRef:
            name: mysql-order-picking-secret
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pv-claim-order-picking
---
apiVersion: v1
kind: Service
metadata:
  name: order-picking-mysql-service
spec:
  selector:
    app: order-picking-mysql
  ports:
  - protocol: TCP
    port: 3308
    targetPort: 3306
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim-order-picking
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:7.2
          ports:
            - containerPort: 6379
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "250m"
              memory: "256Mi"
          volumeMounts:
            - name: redis-storage
              mountPath: /data
          args: ["--appendonly", "yes"]
      volumes:
        - name: redis-storage
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  selector:
    app: redis
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth
  template:
    metadata:
      labels:
        app: auth
    spec:
      containers:
      - name: auth
        image: sasit48/auth-service
        ports:
        - containerPort: 3001
        envFrom:
        - secretRef:
            name: service-auth-secret
---
apiVersion: v1
kind: Service
metadata:
  name: auth-service
spec:
  selector:
    app: auth
  ports:
  - protocol: TCP
    port: 3001      
    targetPort: 3001    
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: invoice
spec:
  replicas: 1
  selector:
    matchLabels:
      app: invoice
  template:
    metadata:
      labels:
        app: invoice
    spec:
      containers:
      - name: invoice
        image: sasit48/invoice-service
        ports:
        - containerPort: 3002
        envFrom:
        - secretRef:
            name: service-invoice-secret
---
apiVersion: v1
kind: Service
metadata:
  name: invoice-service
spec:
  selector:
    app: invoice
  ports:
  - protocol: TCP
    port: 3002      
    targetPort: 3002
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-picking
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order-picking
  template:
    metadata:
      labels:
        app: order-picking
    spec:
      containers:
      - name: order-picking
        image: sasit48/order-picking-service
        ports:
        - containerPort: 3003
        envFrom:
        - secretRef:
            name: service-order-picking-secret
---
apiVersion: v1
kind: Service
metadata:
  name: order-picking-service
spec:
  selector:
    app: order-picking
  ports:
  - protocol: TCP
    port: 3003
    targetPort: 3003
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: react-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ui
  template:
    metadata:
      labels:
        app: ui
    spec:
      containers:
      - name: ui
        image: sasit48/frontend-service
        ports:
        - containerPort: 80
        imagePullPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: ui-service
spec:
  selector:
    app: ui
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80 
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ui-ingress
  annotations:
    nginx.ingress.kubernetes.io/proxy-read-timeout: "5000"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "5000"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "32k" 
    nginx.ingress.kubernetes.io/proxy-buffers: "4 32k"
spec:
  ingressClassName: nginx
  rules:
  - host: wang.ballx86.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: ui-service
            port: 
              number: 80
      - path: /api/auth
        pathType: Prefix
        backend:
          service:
            name: auth-service
            port:
              number: 3001
      - path: /api/invoice
        pathType: Prefix
        backend:
          service:
            name: invoice-service
            port:
              number: 3002
      - path: /api/picking
        pathType: Prefix
        backend:
          service:
            name: order-picking-service
            port:
              number: 3003



